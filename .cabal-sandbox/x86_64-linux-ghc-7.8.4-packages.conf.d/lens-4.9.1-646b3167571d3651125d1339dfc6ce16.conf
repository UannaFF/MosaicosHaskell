name: lens
version: 4.9.1
id: lens-4.9.1-646b3167571d3651125d1339dfc6ce16
license: BSD3
copyright: Copyright (C) 2012-2015 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
package-url:
synopsis: Lenses, Folds and Traversals
description: This package comes \"Batteries Included\" with many useful lenses for the types
             commonly used from the Haskell Platform, and with tools for automatically
             generating lenses and isomorphisms for user-supplied data types.
             .
             The combinators in @Control.Lens@ provide a highly generic toolbox for composing
             families of getters, folds, isomorphisms, traversals, setters and lenses and their
             indexed variants.
             .
             An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
             .
             An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
             .
             A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
             .
             Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
             .
             More information on the care and feeding of lenses, including a brief tutorial and motivation
             for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
             .
             A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
             .
             /Lenses, Folds and Traversals/
             .
             With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
             .
             .
             <<http://i.imgur.com/ALlbPRa.png>>
             .
             <Hierarchy.png (Local Copy)>
             .
             You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
             use any element of the hierarchy as any type it linked to above it.
             .
             The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
             .
             For instance:
             .
             * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
             .
             * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
             .
             /Minimizing Dependencies/
             .
             If you want to provide lenses and traversals for your own types in your own libraries, then you
             can do so without incurring a dependency on this (or any other) lens package at all.
             .
             /e.g./ for a data type:
             .
             > data Foo a = Foo Int Int a
             .
             You can define lenses such as
             .
             > -- bar :: Lens' (Foo a) Int
             > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
             > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
             .
             > -- quux :: Lens (Foo a) (Foo b) a b
             > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
             > quux f (Foo a b c) = fmap (Foo a b) (f c)
             .
             without the need to use any type that isn't already defined in the @Prelude@.
             .
             And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
             .
             > -- traverseBarAndBaz :: Traversal' (Foo a) Int
             > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
             > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
             .
             What is provided in this library is a number of stock lenses and traversals for
             common haskell types, a wide array of combinators for working them, and more
             exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules: Control.Exception.Lens Control.Lens
                 Control.Lens.At Control.Lens.Combinators Control.Lens.Cons
                 Control.Lens.Each Control.Lens.Empty Control.Lens.Equality
                 Control.Lens.Extras Control.Lens.Fold Control.Lens.Getter
                 Control.Lens.Indexed Control.Lens.Internal
                 Control.Lens.Internal.Bazaar Control.Lens.Internal.ByteString
                 Control.Lens.Internal.Coerce Control.Lens.Internal.Context
                 Control.Lens.Internal.Deque Control.Lens.Internal.Exception
                 Control.Lens.Internal.FieldTH Control.Lens.Internal.PrismTH
                 Control.Lens.Internal.Fold Control.Lens.Internal.Getter
                 Control.Lens.Internal.Indexed Control.Lens.Internal.Instances
                 Control.Lens.Internal.Iso Control.Lens.Internal.Level
                 Control.Lens.Internal.List Control.Lens.Internal.Magma
                 Control.Lens.Internal.Prism Control.Lens.Internal.Reflection
                 Control.Lens.Internal.Review Control.Lens.Internal.Setter
                 Control.Lens.Internal.TH Control.Lens.Internal.Zoom
                 Control.Lens.Iso Control.Lens.Lens Control.Lens.Level
                 Control.Lens.Operators Control.Lens.Plated Control.Lens.Prism
                 Control.Lens.Reified Control.Lens.Review Control.Lens.Setter
                 Control.Lens.TH Control.Lens.Traversal Control.Lens.Tuple
                 Control.Lens.Type Control.Lens.Wrapped Control.Lens.Zoom
                 Control.Monad.Error.Lens Control.Parallel.Strategies.Lens
                 Control.Seq.Lens Data.Array.Lens Data.Bits.Lens
                 Data.ByteString.Lens Data.ByteString.Strict.Lens
                 Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
                 Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
                 Data.Map.Lens Data.Sequence.Lens Data.Set.Lens Data.Text.Lens
                 Data.Text.Strict.Lens Data.Text.Lazy.Lens Data.Tree.Lens
                 Data.Typeable.Lens Data.Vector.Lens Data.Vector.Generic.Lens
                 Generics.Deriving.Lens GHC.Generics.Lens System.Exit.Lens
                 System.FilePath.Lens System.IO.Error.Lens Language.Haskell.TH.Lens
                 Numeric.Lens
hidden-modules: Paths_lens
trusted: False
import-dirs: /home/anigarden/Documents/Mosaicos-Haskell/mosaico-bin/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.4/lens-4.9.1
library-dirs: /home/anigarden/Documents/Mosaicos-Haskell/mosaico-bin/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.4/lens-4.9.1
hs-libraries: HSlens-4.9.1
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: array-0.5.0.0-470385a50d2b78598af85cfe9d988e1b
         base-4.7.0.2-bfd89587617e381ae01b8dd7b6c7f1c1
         bifunctors-4.2.1-c10e1069239af87ceeb041f5f7982002
         bytestring-0.10.4.0-d6f1d17d717e8652498cab8269a0acd5
         comonad-4.2.6-40c10f635596e00c9b265fe351552df3
         containers-0.5.5.1-d4bd887fb97aa3a46cbadc13709b7653
         contravariant-1.3.1.1-086a2dc64e396b5e5caf7385c59ac401
         distributive-0.4.4-103454f1fee247b45c741c658bfb3b63
         exceptions-0.8.0.2-e1fa5f37d8c411aae7571d672d32d85b
         filepath-1.3.0.2-25a474a9272ae6260626ce0d70ad1cab
         free-4.12.1-cb8e2d586299de49974bdcb9a781abe1
         ghc-prim-0.3.1.0-a24f9c14c632d75b683d0f93283aea37
         hashable-1.2.3.2-f5e1866ad5daa8dba605f07ae1c3976f
         kan-extensions-4.2.2-91bc62103d1e0c7bbed65088295ba610
         mtl-2.1.3.1-96f1a7910a7553352339ed05fb61c269
         parallel-3.2.0.6-b76e67280eb83e478ad906a2d3287333
         profunctors-4.4.1-902c3e82b78f4eda554362c2a50094bf
         reflection-1.5.2.1-f0242f4c29f40436dca517540eccbacb
         semigroupoids-4.3-a66ce2254881fece74aa5ed452ebfd69
         semigroups-0.16.2.2-adad515ba791f51fc88381d09b93ce3b
         tagged-0.8.0.1-1856f756430338074a6d5cc9b0870a51
         template-haskell-2.9.0.0-6d27c2b362b15abb1822f2f34b9ae7f9
         text-1.2.0.6-4e16e52c9cd5d8806f25a2436848dc85
         transformers-0.3.0.0-6458c21515cab7c1cf21e53141557a1c
         transformers-compat-0.4.0.3-a569ff386af92ad14ee04b669c1761ae
         unordered-containers-0.2.5.1-72876b5217ace591be863f44cd50da78
         vector-0.10.12.3-1440b27e80a5b12125e183e5ca4c5f8f
         void-0.7-f1df7e38ed90689c7e53f302e1eb5a08
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /home/anigarden/Documents/Mosaicos-Haskell/mosaico-bin/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.4/lens-4.9.1/html/lens.haddock
haddock-html: /home/anigarden/Documents/Mosaicos-Haskell/mosaico-bin/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.4/lens-4.9.1/html
